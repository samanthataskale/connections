//initially generated by pyvis, and now hardcoded for integration purposess

let updateValueFilter = function() {
    return function () {
    filter['value'].push(arguments[0])
    }
}

let valueControl = new TomSelect("#select-value",{
    maxItems: null,
    valueField: 'id',
    labelField: 'title',
    searchField: 'title',
    create: false,
    sortField: {
        field: "text",
        direction: "asc"
    },
    onItemAdd: updateValueFilter()
});

//adds the stuff to the THIRD filterbox
//no manaul filtering required
let addValues = function() {
    return function () {
        // clear the current value options and add the selected attribute values
        // tom-select handles duplicates
        let selectedProperty = arguments[0];

        valueControl.clear();
        valueControl.clearOptions();
        filter['value'] = []
        if (filter['item'] === 'node') {
            for (let each in allNodes) {
                valueControl.addOption({
                    id:allNodes[each][selectedProperty],
                    title:allNodes[each][selectedProperty]
                })
            }
        }
        else if (filter['item'] === 'edge') {
            for (let each in allEdges) {
                valueControl.addOption({
                    id:allEdges[each][selectedProperty],
                    title:allEdges[each][selectedProperty]
                })
            }
        }
    }
};

let propControl = new TomSelect("#select-property",{
    valueField: 'id',
    labelField: 'title',
    searchField: 'title',
    create: false,
    sortField: {
        field: "text",
        direction: "asc"
    },
    onItemAdd: addValues()
});

//adds the stuff to the SECOND  filterbox
//possible options are hardcoded to be only the ones that produce useful, valid results
let addProperties = function() {
    return function () {
        // loops through the selected network item and adds the attributes to dropdown
        // tom-select handles duplicates
        clearFilter(false)
        if (arguments[0] === 'edge') {
            propControl.addOption({id: "color", title: "color"})
            propControl.addOption({id: "title", title: "title"})
            /*
            for (let each in allEdges) {
                if (allEdges.hasOwnProperty(each)) {
                    for (let eachProp in allEdges[each]) {
                        if (allEdges[each].hasOwnProperty(eachProp)) {
                            propControl.addOption({id: eachProp, title: eachProp})
                        }
                    }
                }
            } */
        }
        else if (arguments[0] === 'node') {
            propControl.addOption({id: "color", title: "color"})
            propControl.addOption({id: "label", title: "label"})
            /*
            for (let each in allNodes) {
                if (allNodes.hasOwnProperty(each)) {
                    for (let eachProp in allNodes[each]) {
                        if (allNodes[each].hasOwnProperty(eachProp)
                            && (eachProp !== 'hidden' && eachProp !== 'savedLabel'
                                && eachProp !== 'hiddenLabel')) {
                            propControl.addOption({id: eachProp, title: eachProp})

                        }
                    }
                }
            }
            */
        }
    }
};

let itemControl = new TomSelect("#select-item",{
    create: false,
    sortField:{
        field: "text",
        direction: "asc"
    },
    onItemAdd: addProperties()
});

function clearFilter(reset) {
    // utility function to clear all the selected filter options
    // if reset is set to true, the existing filter will be removed
    // else, only the dropdown options are cleared
    propControl.clear();
    propControl.clearOptions();
    valueControl.clear();
    valueControl.clearOptions();
    filter = {
        item : '',
        property : '',
        value : []
    }
    if (reset) {
        itemControl.clear();
        filterHighlight({nodes: []})
    }
}

function updateFilter(value, key) {
    // key could be 'item' or 'property' and value is as selected in dropdown
    filter[key] = value
}
